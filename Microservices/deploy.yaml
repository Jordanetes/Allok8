---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: init-script
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 50Mi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
      - name: init-script-download
        image: appropriate/curl
        args:
          - "-o"
          - "tmp/data/init.sql"
          - "https://raw.githubusercontent.com/rbargues/kubernetes-practice/master/init.sql"
        volumeMounts:
        - name: init-script
          mountPath: /tmp/data
      containers:
        - name: postgres
          resources: 
            limits:
              cpu: "0.3"
            requests:
              cpu: "0.3"
          image: postgres:12.2
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
        - name: init-script 
          persistentVolumeClaim:
            claimName: init-script
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres              
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: app
    tier: backend
spec:
  ports:
  - port: 80
    name: backend-service
    targetPort: 3000
  type: NodePort
  selector:
    app: app
    tier: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
        tier: backend
    spec:
      containers:
        - name: backend-container
          resources: 
            limits:
              cpu: "0.3"
            requests:
              cpu: "0.3"
          image: docker.io/rbargues32/backend:test
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: app
    tier: frontend
spec:
  ports:
  - port: 40
    name: frontend-service
    targetPort: 8080
  type: NodePort
  selector:
    app: app
    tier: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
        tier: frontend
    spec:
      containers:
        - name: testing-docker
          resources: 
            limits:
              cpu: "0.3"
            requests:
              cpu: "0.3"
          image: docker.io/rbargues32/frontend:test
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: allok8
  labels:
    app: app
    tier: allok8
spec:
  ports:
  - port: 50
    name: allok8-service
    targetPort: 3000
  type: NodePort
  selector:
    app: app
    tier: allok8
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: allok8
  labels:
    app: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
        tier: allok8
    spec:
      containers:
        - name: allok8-container
          resources: 
            limits:
              cpu: "0.3"
            requests:
              cpu: "0.3"
          image: docker.io/rbargues32/allok8:latest
          ports:
            - containerPort: 3000